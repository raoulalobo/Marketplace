// API route pour publier une propri√©t√© sur les r√©seaux sociaux via Ayrshare
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { z } from 'zod';
import { prisma } from '@/lib/prisma';

// Sch√©ma de validation pour la requ√™te de partage social
const socialShareSchema = z.object({
  platforms: z.array(z.string()).min(1, 'Au moins une plateforme doit √™tre s√©lectionn√©e'),
  includeElements: z.object({
    title: z.boolean(),
    price: z.boolean(),
    surface: z.boolean(),
    photos: z.boolean(),
    description: z.boolean(),
  }),
  selectedPhotos: z.array(z.string()).optional(),
  customMessage: z.string().optional(),
});

// Interface pour la r√©ponse de l'API Ayrshare
interface AyrshareResponse {
  status: string;
  errors: string[];
  id?: string;
  postIds?: Array<{
    status: string;
    id: string;
    platform: string;
    postUrl?: string;
  }>;
}

// Fonction pour formater le prix en FCFA
function formatPrice(price: number): string {
  return new Intl.NumberFormat('fr-FR').format(price) + ' FCFA';
}

// Fonction pour r√©cup√©rer une propri√©t√© avec v√©rification des droits agent
async function getPropertyForAgent(propertyId: string, agentId: string) {
  const property = await prisma.property.findFirst({
    where: {
      id: propertyId,
      agentId: agentId, // V√©rifier que l'agent poss√®de cette propri√©t√©
    },
    include: {
      agent: {
        select: {
          id: true,
          nom: true,
          prenom: true,
        }
      },
      medias: {
        orderBy: { order: 'asc' },
        take: 4, // Limiter √† 4 photos pour √©viter les limites API
      }
    }
  });

  return property;
}

// Fonction pour g√©n√©rer le contenu du post selon les √©l√©ments s√©lectionn√©s
function generatePostContent(property: any, includeElements: any, customMessage?: string): string {
  let content = '';
  
  // Message personnalis√© en premier
  if (customMessage && customMessage.trim()) {
    content += customMessage.trim() + '\n\n';
  }

  // Titre de la propri√©t√©
  if (includeElements.title) {
    content += `üè° ${property.titre}\n\n`;
  }

  // Prix et superficie
  const details = [];
  if (includeElements.price) {
    details.push(`üí∞ Prix: ${formatPrice(property.prix)}`);
  }
  if (includeElements.surface) {
    details.push(`üìê Superficie: ${property.superficie} m¬≤`);
  }
  if (details.length > 0) {
    content += details.join('\n') + '\n\n';
  }

  // Description
  if (includeElements.description && property.description) {
    const shortDescription = property.description.length > 200 
      ? property.description.substring(0, 200) + '...'
      : property.description;
    content += `üìã ${shortDescription}\n\n`;
  }

  // Localisation
  content += `üìç ${property.adresse}\n\n`;
  
  // Hashtags pertinents
  const typeHashtags = {
    'MAISON': '#Maison #Villa',
    'TERRAIN': '#Terrain #Parcelle',
    'BUREAU': '#Bureau #Commercial',
    'HANGAR': '#Hangar #Entrepot'
  };
  
  content += `${typeHashtags[property.type as keyof typeof typeHashtags]} #ImmobilierCameroun #RealEstate #Investissement`;

  return content.trim();
}

// Fonction pour publier sur Ayrshare
async function publishToAyrshare(
  content: string, 
  platforms: string[], 
  mediaUrls: string[]
): Promise<AyrshareResponse> {
  const AYRSHARE_API_KEY = process.env.AYRSHARE_API_KEY;
  
  if (!AYRSHARE_API_KEY) {
    throw new Error('Cl√© API Ayrshare manquante');
  }

  // Pr√©parer les donn√©es pour Ayrshare
  const postData: any = {
    post: content,
    platforms: platforms,
  };

  // Ajouter les m√©dias si des photos sont incluses
  if (mediaUrls.length > 0) {
    postData.mediaUrls = mediaUrls;
  }

  try {
    const response = await fetch('https://api.ayrshare.com/api/post', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AYRSHARE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(postData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur Ayrshare API:', response.status, errorText);
      throw new Error(`Erreur Ayrshare API: ${response.status} - ${errorText}`);
    }

    const result: AyrshareResponse = await response.json();
    return result;
    
  } catch (error) {
    console.error('üí• Erreur lors de la publication Ayrshare:', error);
    throw error;
  }
}

// POST /api/properties/[id]/share-social - Publier une propri√©t√© sur les r√©seaux sociaux
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: propertyId  } = await params;
    
    // V√©rifier l'authentification et le r√¥le agent
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Authentication requise' },
        { status: 401 }
      );
    }

    if (session.user.role !== 'AGENT') {
      return NextResponse.json(
        { error: 'Acc√®s r√©serv√© aux agents immobiliers' },
        { status: 403 }
      );
    }

    // Valider les donn√©es de la requ√™te
    const body = await request.json();
    const validatedData = socialShareSchema.parse(body);

    console.log(`üì± Demande de partage social pour propri√©t√© ${propertyId} par agent ${session.user.id}`);

    // R√©cup√©rer la propri√©t√© avec v√©rification des droits
    const property = await getPropertyForAgent(propertyId, session.user.id);
    
    if (!property) {
      return NextResponse.json(
        { error: 'Propri√©t√© non trouv√©e ou acc√®s refus√©' },
        { status: 404 }
      );
    }

    // G√©n√©rer le contenu du post
    const postContent = generatePostContent(
      property, 
      validatedData.includeElements, 
      validatedData.customMessage
    );

    // Pr√©parer les URLs des m√©dias selon la s√©lection
    let mediaUrls: string[] = [];
    if (validatedData.selectedPhotos && validatedData.selectedPhotos.length > 0) {
      // Utiliser les photos s√©lectionn√©es sp√©cifiquement
      mediaUrls = validatedData.selectedPhotos.slice(0, 4); // Limiter √† 4 photos par s√©curit√©
    } else if (validatedData.includeElements.photos && property.medias.length > 0) {
      // Fallback : utiliser toutes les photos disponibles (ancien comportement)
      mediaUrls = property.medias
        .filter(media => media.type === 'PHOTO')
        .slice(0, 4)
        .map(media => media.url);
    }

    console.log(`üìù Contenu g√©n√©r√© (${postContent.length} caract√®res)`);
    console.log(`üñºÔ∏è ${mediaUrls.length} photos √† publier`);
    console.log(`üì± Plateformes: ${validatedData.platforms.join(', ')}`);

    // Publier sur Ayrshare
    const result = await publishToAyrshare(
      postContent, 
      validatedData.platforms, 
      mediaUrls
    );

    // Analyser les r√©sultats
    const successfulPosts = result.postIds?.filter(post => post.status === 'success') || [];
    const failedPosts = result.postIds?.filter(post => post.status !== 'success') || [];

    console.log(`‚úÖ ${successfulPosts.length} posts publi√©s avec succ√®s`);
    if (failedPosts.length > 0) {
      console.log(`‚ùå ${failedPosts.length} posts √©chou√©s`);
    }

    return NextResponse.json({
      success: true,
      message: `Publication r√©ussie sur ${successfulPosts.length} plateforme(s)`,
      data: {
        ayrshareId: result.id,
        totalPlatforms: validatedData.platforms.length,
        successfulPosts: successfulPosts.length,
        failedPosts: failedPosts.length,
        postDetails: result.postIds,
        contentPreview: postContent.substring(0, 100) + '...',
        mediaCount: mediaUrls.length
      },
      errors: result.errors
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du partage social:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Donn√©es invalides', 
          details: error.errors.map(e => `${e.path.join('.')}: ${e.message}`) 
        },
        { status: 400 }
      );
    }

    if (error instanceof Error) {
      console.error('üìã D√©tails de l\'erreur:', {
        message: error.message,
        stack: error.stack,
        environment: {
          AYRSHARE_API_KEY: process.env.AYRSHARE_API_KEY ? 'D√©finie' : 'Manquante',
        }
      });

      if (error.message.includes('Cl√© API Ayrshare manquante')) {
        return NextResponse.json(
          { error: 'Configuration Ayrshare incompl√®te' },
          { status: 500 }
        );
      }
      
      if (error.message.includes('Ayrshare API')) {
        return NextResponse.json(
          { error: 'Erreur lors de la publication sur les r√©seaux sociaux', details: error.message },
          { status: 502 }
        );
      }
      
      return NextResponse.json(
        { error: 'Erreur interne du serveur', details: error.message },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}