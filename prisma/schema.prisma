generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String
  nom                  String
  prenom               String
  telephone            String?
  avatar               String?               // URL de l'avatar utilisateur
  role                 UserRole              @default(ACHETEUR)
  isActive             Boolean               @default(true)
  emailVerified        DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  lastLoginAt          DateTime?
  accounts             Account[]
  favorites            Favorite[]
  properties           Property[]
  propertyTimeSessions PropertyTimeSession[]
  propertyViews        PropertyView[]
  reports              Report[]
  searchHistory        SearchHistory[]
  sessions             Session[]
  visitRequests        VisitRequest[]

  @@map("users")
}

model Property {
  id            String                @id @default(cuid())
  titre         String
  description   String
  type          PropertyType
  prix          Int
  superficie    Float?
  adresse       String
  fraisVisite   Int?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  agentId       String
  featuredUntil DateTime?
  isFeatured    Boolean               @default(false)
  viewsCount    Int                   @default(0)
  ville         String?
  payer_apres   Boolean               @default(false)
  troc          Boolean               @default(false)
  favorites     Favorite[]
  agent         User                  @relation(fields: [agentId], references: [id])
  medias        PropertyMedia[]
  timeSessions  PropertyTimeSession[]
  views         PropertyView[]
  reports       Report[]
  visitRequests VisitRequest[]

  @@map("properties")
}

model PropertyMedia {
  id         String    @id @default(cuid())
  url        String
  type       MediaType
  order      Int       @default(0)
  createdAt  DateTime  @default(now())
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_medias")
}

model VisitRequest {
  id              String      @id @default(cuid())
  message         String?
  datePreferee    DateTime?
  status          VisitStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  acheteurId      String
  propertyId      String
  responseMessage String?
  scheduledDate   DateTime?
  acheteur        User        @relation(fields: [acheteurId], references: [id])
  property        Property    @relation(fields: [propertyId], references: [id])

  @@map("visit_requests")
}

model Report {
  id          String       @id @default(cuid())
  motif       String
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  propertyId  String
  property    Property     @relation(fields: [propertyId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@map("reports")
}

model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, propertyId])
  @@map("favorites")
}

model PropertyView {
  id         String   @id @default(cuid())
  viewerIp   String
  userAgent  String?
  createdAt  DateTime @default(now())
  propertyId String
  userId     String?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([propertyId, createdAt])
  @@index([createdAt])
  @@map("property_views")
}

model PropertyTimeSession {
  id           String    @id @default(cuid())
  sessionId    String    @unique
  viewerIp     String
  userAgent    String?
  enteredAt    DateTime  @default(now())
  lastActiveAt DateTime  @default(now())
  leftAt       DateTime?
  timeSpent    Int?
  activeTime   Int?
  events       Json?
  scrollDepth  Float?
  propertyId   String
  userId       String?
  property     Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [userId], references: [id])

  @@index([propertyId, enteredAt])
  @@index([sessionId])
  @@index([enteredAt])
  @@map("property_time_sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model SearchHistory {
  id          String   @id @default(cuid())
  userId      String
  searchQuery String?
  filters     Json
  resultCount Int      @default(0)
  name        String?
  createdAt   DateTime @default(now())
  lastUsed    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, lastUsed])
  @@index([createdAt])
  @@map("search_history")
}

enum UserRole {
  AGENT
  ACHETEUR
  ADMIN
}

enum PropertyType {
  MAISON
  TERRAIN
  BUREAU
  HANGAR
  AUTRE
}

enum MediaType {
  PHOTO
  VIDEO
}

enum VisitStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
